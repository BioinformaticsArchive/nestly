# -*- python -*-
#
# This example takes every file in the inputs directory and performs the
# following operations. First, it cuts out a column range from every line in
# the file, in this case either 1-5 or 3-40. After it does this it optionally
# filters out every line that has an "o" or "O". Then it runs wc on every such
# file.
#

from os.path import join
import os

from nestly.scons import SConsWrap
from nestly import Nest

nest = Nest()
w = SConsWrap(nest, 'build')


# An aggregator that runs prep_tab.sh on all of its arguments.
# This aggregator can then be populated below.
@w.add_aggregate(list)
def all_counts(outdir, c, inputs):
    return Command(join(outdir, 'all_counts.tab'),
                   inputs,
                   './prep_tab.sh $SOURCES | column -t >$TARGET')

# An aggregator that concatenates all of the cut files into one.
@w.add_aggregate(list)
def all_cut(outdir, c, inputs):
    return Command(join(outdir, 'all_cut.txt'),
                   inputs,
                   'cat $SOURCES >$TARGET')

# Add a nest with the name 'input_file' that the files in the inputs directory
# as its nestable list. Make its label function just the basename.
w.add('input_file', [join('inputs', f) for f in os.listdir('inputs')],
      label_func=os.path.basename)

# This determines the column range we will cut out of the poem.
w.add('cut_range', ['1-5', '3-40'])

# This adds a nest with the name 'cut', but also makes an SCons target out of
# the result.
@w.add_target()
def cut(outdir, c):
    cut, = Command(join(outdir, 'cut'),
                   c['input_file'],
                   'cut -c {0[cut_range]} <$SOURCE >$TARGET'.format(c))
    # Here we add this cut file to the all_cut aggregator.
    c['all_cut'].append(cut)
    return cut

# This determines if we remove the lines with o's.
w.add('o_choice', ['remove_o', 'leave_o'])

@w.add_target()
def o_choice(outdir, c):
    # If we leave the o lines, then we don't have to do anything.
    if c['o_choice'] == 'leave_o':
        return c['cut']

    # If we want to remove the o lines, then we have to make an SCons Command
    # that does so with sed.
    return Command(join(outdir, 'o_removed'),
                   c['cut'],
                   'sed "/[oO]/d" <$SOURCE >$TARGET')[0]

# Add a target for the word counts.
@w.add_target()
def counts(outdir, c):
    counts, = Command(join(outdir, 'counts'),
                      c['o_choice'],
                      'wc <$SOURCE >$TARGET')
    c['all_counts'].append(counts)
    return counts

w.finalize_aggregates()
