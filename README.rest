======
nestly
======

Nestly is a collection of functions and scripts designed to make running software with combinatorial choices of parameters easier.

The setup for nestly is that we have a collection of simulations we would like to run with different parameter choices.

However, importantly, the set of parameters is fixed for all of the simulations.

We would like to set things up tidily with nested directories reflecting nested parameter choices.

Note that a fixed set of parameters is not the only way to go, and in Extensions_ below we describe a more general setup.

The vision here is that we take a fixed set of parameters and generate a single type of output, which can then be fed into a database for comparison and retrieval.

Param lists
===========
In the main control dict, we supply a function which takes the control so far and spits out a list of the next things to use.

The following may be useful for constructing such functions.

filter_choices
  takes a param and a function which specifies filtering on the param under consideration and a control dict
  it just makes substitutions in the control dict for those values which satisfy the filter function

glob_choices
  takes a param and a control dict, then offers a way to glob based on the control file

the commonality is that each one makes a directory returns a list of choices for the next param
the function takes those choices, chdirs, updates the control dictionary, then recurs

Example
-------

Each param is a level of nested directory, and each choice is a directory in that structure, for example, if we wanted to run combine a few parameter choices:

========== ==============================
Option     Choices
---------- ------------------------------
strategy   approximate, exhaustive
---------- ------------------------------
run_count  10, 100, 1000
---------- ------------------------------
input file any file matching inputs/file*
========== ==============================

We might get a directory tree like::

  ├── approximate
  │   ├── 10
  │   │   ├── file1
  │   │   │   └── control.json
  │   │   ├── file2
  │   │   │   └── control.json
  │   │   └── file3
  │   │       └── control.json
  │   ├── 100
  │   │   ├── file1
  │   │   │   └── control.json
  │   │   ├── file2
  │   │   │   └── control.json
  │   │   └── file3
  │   │       └── control.json
  │   └── 1000
  │       ├── file1
  │       │   └── control.json
  │       ├── file2
  │       │   └── control.json
  │       └── file3
  │           └── control.json
  └── exhaustive
      ├── 10
      │   ├── file1
      │   │   └── control.json
      │   ├── file2
      │   │   └── control.json
      │   └── file3
      │       └── control.json
      ├── 100
      │   ├── file1
      │   │   └── control.json
      │   ├── file2
      │   │   └── control.json
      │   └── file3
      │       └── control.json
      └── 1000
          ├── file1
          │   └── control.json
          ├── file2
          │   └── control.json
          └── file3
              └── control.json

With the final ``control.json`` reading::

  {
      "input_file": "/Users/cmccoy/Development/nestly/examples/basic_nest/inputs/file3", 
      "run_count": "1000", 
      "strategy": "exhaustive"
  }

The control files then serve as inputs to ``nestrun``.

Implementation
--------------
At each node we specify function giving action of param on the control file, and children 


Results analysis
================
Want to be able to extract results by keyword



Extensions
==========

Parameter trees
---------------
One natural extension of a list is a tree.

If there are some types of simulation which require different number of parameter choices.
for example, say we had a no rate var sim and a rate var sim.
would need to collapse all of those choices into a single one.

will make things complex from the database side of things-- rather than a parameter list we have combinations of parameters...
but we need a complete control param dictionary--

